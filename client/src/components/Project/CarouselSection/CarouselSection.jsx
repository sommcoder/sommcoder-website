import styled from "styled-components";
import CarouselItem from "../CarouselItem/CarouselItem";
import wordle from "/wordle.svg";
import markey from "/mar-key.svg";
import sommcoder from "/sommcoder.svg";
import jssx from "/jssx.png";

export default function CarouselSection() {
  // we should use Firebase's Firestore Document DB to store and fetch this data
  // the long description will get passed to the Page only
  const items = [
    {
      thumbnail: wordle,
      github: "https://sommcoder.github.io/Wordle-Clone-App/",
      video: "https://youtube.com/embed/1bBmUiLxEKI?feature=share",
      npm: null,
      title: "Wordle Clone",
      short: "Wordle Clone",
      long: "Brian's first app! A stripped down clone of the popular NYT game Wordle built using vanilla JS and JQuery",
    },
    {
      thumbnail: markey,
      github: "https://github.com/sommcoder/markey",
      title: "Mar-Key",
      npm: null,
      short: "Display tester for Theatre Marquees",
      long: "Allows users to determine how many letter blocks to collect for an analog marquee display with input validation based on the current display. Marquee keeps track of block counts, dynamically validates messages as they're entered, cross references the former display to the desired new display so that users can determine which blocks they need to retrieve and how many of each depending on which of the 3 marquees have received input",
    },
    {
      thumbnail: jssx,
      github: "https://github.com/sommcoder/jsx-to-suitescript-transpiler",
      title: "JSX-to-SS Transpiler",
      video: "https://youtube.com/embed/mo3ZGLh8NVs?feature=share",
      npm: "https://www.npmjs.com/package/jsx-to-ss",
      short: "JSX to SuiteScript Transpiler",
      long: "Brings component-based UI development to the Netsuite ERP platform by allowing developers to write and maintain Suitelet source code using JSX syntax. Affectionately named 'JSSX', it improves DX by reducing the verbosity of having to type successive API calls to interact with Netsuite and allowing the user to develop Suitelet UIs using simple JSX syntax. Component relationships are inferred by their hierarchy and so JSSX avoids the need to imperatively 'link' child components to their parents, this is all transpiled for you. Additionally, ids are autogenerated with a 'cust_page' prefix and follows a consistent naming convention across the UI that's transpiled",
    },
    {
      thumbnail: sommcoder,
      github: "",
      title: "SommCoder Website",
      short: "This Website",
      long: "The UI is built with React & styled-components and hosted on Google's Firebase",
    },
  ];

  /*
   
   - insert videos using a <video> tag
TODO: maybe have the YouTube shorts appear on desktop only but for mobile provide the links when a user clicks on the carouselItem. like: onFocus(showLinks())
   
  */

  return (
    <StyledCarouselSection>
      {items.map(({ thumbnail, link, title, short, video }) => (
        <CarouselItem
          thumbnail={thumbnail}
          title={title}
          short={short}
          key={title}
          link={link}
          video={video}
        />
      ))}
    </StyledCarouselSection>
  );
}
const StyledCarouselSection = styled.div`
  display: grid;
  grid-row-gap: 2rem;
  grid-column-gap: 2rem;
  // min needs to be large enough to accommodate the px of the img tags in CarouselItem
  grid-template-columns: 1fr;
  justify-items: center;
  align-items: center;

  // TODO: need to center the Items. why does the above not work??
  // desktop:
  @media (min-width: 850px) {
    grid-template-rows: 1fr;
    // ! When auto-fill is given as the repetition number, if the grid container has a definite size or max size in the relevant axis, then the number of repetitions is the largest possible positive integer that does not cause the grid to overflow its grid container.
    grid-template-columns: repeat(auto-fill, 26rem);
    margin-top: 0rem;
  }

  /*
   
  DESKTOP:
  - we want the carousel items to transition from the right
  - we want the carousel arrows to actually render
   
  */
`;
